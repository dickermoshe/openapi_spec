components:
  schemas:
    AllOfDateTimer:
      allOf:
      - $ref: '#/components/schemas/DateTimer'
      example: '2019-01-01 00:00:00'
    Category:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Dogs
          type: string
      type: object
      xml:
        name: category
    DateTimer:
      example: '2019-01-01T00:00:00'
      format: date-time
      type: string
    Options:
      properties:
        a:
          format: date-time
          nullable: true
          type: string
        b:
          format: date-time
          nullable: true
          type: string
        c:
          items:
            type: string
          type: array
      type: object
    Payment:
      properties:
        amount:
          example: 625.0
          format: float
          type: number
        date:
          $ref: '#/components/schemas/AllOfDateTimer'
      type: object
    Pet:
      properties:
        category:
          $ref: '#/components/schemas/Category'
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
          xml:
            wrapped: true
      required:
      - name
      - photoUrls
      type: object
      xml:
        name: pet
    Tag:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: tag
info:
  title: Foo
  version: 1.0.0
openapi: 3.0.0
paths:
  /foo:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Payment'
                type: array
          description: example
  /test:
    get:
      operationId: test
      parameters:
      - explode: true
        in: query
        name: options
        required: false
        schema:
          $ref: '#/components/schemas/Pet'
        style: deepObject
      - explode: true
        in: query
        name: inputOptions
        required: false
        schema:
          $ref: '#/components/schemas/Options'
        style: deepObject
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
    post:
      operationId: test_post
      parameters:
      - explode: true
        in: query
        name: query_object
        required: false
        schema:
          $ref: '#/components/schemas/Pet'
        style: form
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
